from __future__ import division, print_function
import bisect
import math
import heapq
import itertools
import sys
from collections import deque
from atexit import register
from collections import Counter
from functools import reduce
sys.setrecursionlimit(10000000)
if sys.version_info[0] < 3:
    from io import BytesIO as stream
else:
    from io import StringIO as stream
 
 
if sys.version_info[0] < 3:
    class dict(dict):
        """dict() -> new empty dictionary"""
        def items(self):
            """D.items() -> a set-like object providing a view on D's items"""
            return dict.iteritems(self)
 
        def keys(self):
            """D.keys() -> a set-like object providing a view on D's keys"""
            return dict.iterkeys(self)
 
        def values(self):
            """D.values() -> an object providing a view on D's values"""
            return dict.itervalues(self)
 
    input = raw_input
    range = xrange
 
    filter = itertools.ifilter
    map = itertools.imap
    zip = itertools.izip
 
 
def sync_with_stdio(sync=True):
    """Set whether the standard Python streams are allowed to buffer their I/O.
 
    Args:
        sync (bool, optional): The new synchronization setting.
 
    """
    global input, flush
 
    if sync:
        flush = sys.stdout.flush
    else:
        sys.stdin = stream(sys.stdin.read())
        input = lambda: sys.stdin.readline().rstrip('\r\n')
 
        sys.stdout = stream()
        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))

def main():
    # import math
    def primeFactors(n):
        d=dict()
        # Print the number of two's that divide n
        while n % 2 == 0:
            if 2 in d:
                d[2]+=1
            else:
                d[2]=1
            n = n // 2
             
        # n must be odd at this point
        # so a skip of 2 ( i = i + 2) can be used
        for i in range(3,int(math.sqrt(n))+1,2):
             
            # while i divides n , print i ad divide n
            while n % i== 0:
                # print i,
                if i in d:
                    d[i]+=1
                else:
                    d[i]=1
                n = n // i
                 
        # Condition if n is a prime
        # number greater than 2
        if n > 2:
            if n in d:
                d[n]+=1
            else:
                d[n]=1
        return d
    cubes=[(i*i) for i in range(2,319)]
    multb=[[] for i in range(100001)]
    for j in range(1,100001):
        d=primeFactors(j)
        minmult=1
        for i in d:
            if d[i]%2!=0:
                minmult*=i
        multb[j].append(minmult)
        for i in cubes:
            if minmult*i<100009:
                multb[j].append(minmult*i)
    for t in range(int(input())):
        posx,posy,negx,negy=set(),set(),set(),set()
        n,m=map(int,input().split())
        a=[int(o) for o in input().split()]
        b=[int(o) for o in input().split()]
        ans=0
        for i in a:
            if i>0:
                posx.add(i)
            elif i<0:
                negx.add(-i)
            else:
                ans+=(n-1)*m
        for i in b:
            if i>0:
                posy.add(i)
            elif i<0:
                negy.add(-i)
            else:
                ans+=(m-1)*n
        # print(posx,posy,negx,negy)
        for i in negx:
            # print(i,multb[i][:20])
            for j in multb[i]:
                # print(i,j,i*j)
                if j in posx and math.sqrt(i*j) in posy:
                    ans+=1
                if j in posx and math.sqrt(i*j) in negy:
                    ans+=1
        for i in negy:
            for j in multb[i]:
                # print(i,j,i*j)
                if j in posy and math.sqrt(i*j) in posx:
                    ans+=1
                if j in posy and math.sqrt(i*j) in negx:
                    ans+=1
        print(ans)
       

   


if __name__ == '__main__':
    sync_with_stdio(False)
    main()