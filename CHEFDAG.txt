
#include<iostream>
#include<bits/stdc++.h>

#define ll  long long int

using namespace std;

bool bpm(bool bpGraph[505][505], int u, 
         bool seen[], int matchR[],int M,int N) 
{ 
    // Try every job one by one 
    for (int v = 0; v < N; v++) 
    { 
        // If applicant u is interested in  
        // job v and v is not visited 
        if (bpGraph[u][v] && !seen[v]) 
        { 
            // Mark v as visited 
            seen[v] = true;  
  
            // If job 'v' is not assigned to an  
            // applicant OR previously assigned  
            // applicant for job v (which is matchR[v])  
            // has an alternate job available.  
            // Since v is marked as visited in  
            // the above line, matchR[v] in the following  
            // recursive call will not get job 'v' again 
            if (matchR[v] < 0 || bpm(bpGraph, matchR[v], 
                                     seen, matchR,M,N)) 
            { 
                matchR[v] = u;
                //cout<<matchR[v]<<endl;
                return true; 
            } 
        } 
    } 
    return false; 
} 
  
// Returns maximum number 
// of matching from M to N 
int maxBPM(bool bpGraph[505][505],int M,int N) 
{ 
    // An array to keep track of the  
    // applicants assigned to jobs.  
    // The value of matchR[i] is the  
    // applicant number assigned to job i, 
    // the value -1 indicates nobody is 
    // assigned. 
    int matchR[505]; 
  
    // Initially all jobs are available 
    memset(matchR, -1, sizeof(matchR)); 
  
    // Count of jobs assigned to applicants 
    int result = 0;  
    for (int u = 0; u < M; u++) 
    { 
        // Mark all jobs as not seen  
        // for next applicant. 
        bool seen[N]; 
        memset(seen, 0, sizeof(seen)); 
  
        // Find if the applicant 'u' can get a job 
        if (bpm(bpGraph, u, seen, matchR,M,N)) 
            result++; 
    } 
    
    cout<<N-result<<endl;
    
    int output[N];
    memset(output,0, sizeof(output));
    for(int i=0;i<M;i++)
    {
     
        if(matchR[i]!=-1)
        {
            output[matchR[i]]=i+1;
        }
    }
    
    for(int i=0;i<M;i++)
    {
        cout<<output[i]<<" ";
    }
    cout<<endl;
    return result; 
    
} 



int main()
{
    int T;
    cin>>T;
    while(T--)
    {
    bool a[505][505];
    vector<ll> v;
      ll n,k,temp;
      cin>>n>>k;
      //cout<<n<<k;
      for(ll i=0;i<n;i++)
      {
        for(ll j=0;j<n;j++)
        {
            if(i==j)
            {
                a[i][j]=0;
            }
            else{
                a[i][j]=1;
            }
        }
      }
     
     for(ll i=0;i<k;i++)
     {
        for(ll j=0;j<n;j++)
        {
            cin>>temp;
            v.push_back(temp);
        }
        
        for(ll j=n-1;j>0;j--)
        {
            //cout<<j<<endl;
            for(ll p=j-1;p>=0;p--)
            {
                //cout<<v[j]<<" "<<v[p]<<endl;
                a[v[j]-1][v[p]-1]=0;
            }
        }
        v.clear();
      }
     
    //  for(ll j=0;j<n;j++)
    //     {
    //         for(ll p=0;p<n;p++)
    //         {
    //           cout<<a[j][p]<<" ";
    //         }
    //         cout<<endl;
    //     }
    
    maxBPM(a,n,n);
        
 }
 
 
    return 0;
}


//https://www.geeksforgeeks.org/maximum-bipartite-matching/